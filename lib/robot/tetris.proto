package tetris;

// Handshake MUST be the first message sent from clients to servers.
// After sending it, they should wait for a HandshakeACK, which will
// contain authentication status.
message Handshake {
    // Channel ID you want to connect as.
    required uint32 channel = 1;
    // That channel's stream key
    required string streamKey = 2;
}

// This is sent from the server to the client in response to a
// Handshake message. It's only send on a successful handshake.
// In other cases, an error will be sent.
message HandshakeACK {}

// The Report is send down to the streamer's computer at the
// reportFrequency, containing information about connected
// clients and their actions.
message Report {
    // Unix seconds timestamp in milliseconds that this report was sent at.
    required uint32 time = 1;
    required Users users = 2;

    // Contains information about the users connected to the stream.
    message Users {
        // Total number of users connected to the stream.
        required uint32 connected = 1;
        // Number of users who gave any kind of input in the last
        // 30 seconds.
        required uint32 quorum = 2;
    }

    // Reports for the Joystick input type.
    message JoystickInfo {
        required uint32 id = 1;

        message Data {
            required double X = 1;
            required double Y = 2;
        }

        // Cordinates analysis, if requested.
        optional Data coordMean = 2;
        optional Data coordStddev = 3;
    }
    repeated JoystickInfo joystick = 3;

    // Reports for the Tactile input type.
    message TactileInfo {
        required uint32 id = 1;

        // analysis on how many users are holding and pressing releasing
        // the buttons, if requested.
        optional double holding = 2;
        optional double pressFrequency = 3;
        optional double releaseFrequency = 4;
    }
    repeated TactileInfo tactile = 4;


    // Reports for the ScreenCoords input type.
    message ScreenCoordsInfo {
        required uint32 id = 1;

        // Cordinates analysis, if requested.
        optional double coordMean = 2;
        optional double coordStdev = 3;
    }
    repeated ScreenCoordsInfo screenCoords = 5;


    // Reports for the ScreenCoords input type.
    message ScreenPressInfo {
        required uint32 id = 1;

        // analysis on how many users are holding and pressing releasing
        // the buttons, if requested.
        optional double holding = 2;
        optional double pressFrequency = 3;
        optional double releaseFrequency = 4;
    }
    repeated ScreenPressInfo screenPress = 6;
}

// An error in response to some invalid input or event.
message Error {
    required string message = 1;
}

// A ProgressUpdate message may be sent up periodically from the Robot. It
// contains an array of objects to update the multiple controls on the frontend.
message ProgressUpdate {
    // Progress update for a Tactile input.
    message TactileProgress {
        // The associated tactile button's ID.
        required uint32 id = 1;

        // The progress this input as towards some threshold, designated by the
        // robot. This must be a float value in the range [0, 1).
        optional float progress = 3;

        // The duration, in milliseconds, before the action effected by this input
        // may be carried out again. Note that this will decrement automatically
        // on the frontend and does not need continuous updates.
        optional uint32 cooldown = 4;

        // Denotes that the action effected by this control has
        // occurred, showing a "pulse" on the input.
        optional bool fired = 5;
    }
    repeated TactileProgress tactile = 1;
}
